#include <stdlib.h>
#include <stdio.h>
#include <string.h>

#include <primitives.h>

/**
 * Size of a minimal memory that just contain meta-data required by the VM to
 * run.
 */
#define MINIMAL_MEMORY_SIZE 9

#suite primitives_tests

#test test_initialize_primitives_data
    struct virtual_machine *vm;
    vm = (struct virtual_machine *) malloc(sizeof(struct virtual_machine));
    if(vm == NULL_VM){
        fail();
    }
    if(initialize_primitives_data(vm) != 0){
        fail();
    }

    fail_unless(vm->file_streams[0] == stdin);
    fail_unless(vm->file_streams[1] == stdout);
    fail_unless(vm->file_streams[2] == stderr);
    for(int i = 3; i<FILE_STREAMS_SIZE; i++){
        fail_unless(vm->file_streams[i] == NULL);
    }

    free_vm(vm);

#test test_finalize_primitives_data
    struct virtual_machine *vm;
    vm = (struct virtual_machine *) malloc(sizeof(struct virtual_machine));
    if(vm == NULL_VM){
        fail();
    }
    if(initialize_primitives_data(vm) != 0){
        fail();
    }

    finalize_primitives_data(vm);

    for(int i = 0; i<FILE_STREAMS_SIZE; i++){
        fail_unless(vm->file_streams[i] == NULL);
    }

    free(vm);

#test test_primitive_fail
    struct virtual_machine *vm;
    WORD memory[MINIMAL_MEMORY_SIZE];
    if(new_vm(&vm) != VM_OK){
        fail();
    }
    set_memory(vm, memory);

    // Set arbitrary data at primitive result code address
    memory[PRIMITIVE_RESULT_CODE_ADDRESS] = 42;

    primitive_fail(vm);
    // ensure primitive wrote at result code address that it failed.
    fail_unless(memory[PRIMITIVE_RESULT_CODE_ADDRESS] == PRIMITIVE_FAILED_RESULT_CODE);

    finalize_primitives_data(vm);
    free(vm);

#test test_primitive_nop
    struct virtual_machine *vm;
    WORD memory[MINIMAL_MEMORY_SIZE];
    if(new_vm(&vm) != VM_OK){
        fail();
    }
    set_memory(vm, memory);

    // Set arbitrary data at primitive result code address
    memory[PRIMITIVE_RESULT_CODE_ADDRESS] = 42;

    primitive_nop(vm);
    // ensure primitive wrote at result code address that it worked.
    fail_unless(memory[PRIMITIVE_RESULT_CODE_ADDRESS] == PRIMITIVE_OK_RESULT_CODE);

    finalize_primitives_data(vm);
    free(vm);

#test test_primitive_get_char
    fail();

#test test_primitive_put_char
    fail();

#test test_primitive_stop
    struct virtual_machine *vm;
    WORD memory[MINIMAL_MEMORY_SIZE];
    if(new_vm(&vm) != VM_OK){
        fail();
    }
    set_memory(vm, memory);

    // Set arbitrary data at primitive result code address
    memory[PRIMITIVE_RESULT_CODE_ADDRESS] = 42;
    // Check current status of VM is running.
    fail_unless(vm->status == VIRTUAL_MACHINE_RUN);

    primitive_stop(vm);
    // ensure primitive wrote at result code address that it worked.
    fail_unless(memory[PRIMITIVE_RESULT_CODE_ADDRESS] == PRIMITIVE_OK_RESULT_CODE);
    fail_unless(vm->status == VIRTUAL_MACHINE_STOP);

    finalize_primitives_data(vm);
    free(vm);


#test test_primitive_open_file_read
    struct virtual_machine *vm;
    char *file_path = "test_read.txt";
    int file_path_length = strlen(file_path) + 1;
    // Create file to read from.
    FILE * fp;
    fp = fopen (file_path,"w");
    fprintf (fp, "File to read in test_primitive_open_file_read."); 
    fclose (fp);

    // Need a memory that can store open mode (1 byte) for the file and the
    // null-terminated string for the file path.
    WORD memory[MINIMAL_MEMORY_SIZE+1+file_path_length];
    if(new_vm(&vm) != VM_OK){
        fail();
    }
    // Setup memory
    memory[MINIMAL_MEMORY_SIZE+1] = PRIMITIVE_FILE_MODE_READ;
    for(int i = 0; i<file_path_length; i++){
        memory[MINIMAL_MEMORY_SIZE+1+i] = file_path[i];
    }
    memory[PRIMITIVE_RESULT_POINTER_HIGH_ADDRESS] = 0x00;
    memory[PRIMITIVE_RESULT_POINTER_MIDDLE_ADDRESS] = 0x00;
    memory[PRIMITIVE_RESULT_POINTER_LOW_ADDRESS] = MINIMAL_MEMORY_SIZE;
    memory[MINIMAL_MEMORY_SIZE] = PRIMITIVE_FILE_MODE_READ;
    set_memory(vm, memory);

    // Make sure file_streams[3] was not used before primitive call.
    fail_unless(vm->file_streams[3] == NULL);

    primitive_open_file(vm);

    // Make sure primitive succeed
    fail_unless(memory[PRIMITIVE_RESULT_CODE_ADDRESS] == PRIMITIVE_OK_RESULT_CODE);

    // Make sure file stream is allocated.
    fail_unless(vm->file_streams[3] != NULL);
    fail_unless(memory[MINIMAL_MEMORY_SIZE] == 3);
    
    // Make sure file is open in read mode.
    fail_unless(fgetc(vm->file_streams[3]) == 'F');

    remove(file_path);
    finalize_primitives_data(vm);
    free(vm);

#test test_primitive_open_file_write
    struct virtual_machine *vm;
    char *file_path = "test_write.txt";
    int file_path_length = strlen(file_path) + 1;
    FILE * fp;

    // Need a memory that can store open mode (1 byte) for the file and the
    // null-terminated string for the file path.
    WORD memory[MINIMAL_MEMORY_SIZE+1+file_path_length];
    if(new_vm(&vm) != VM_OK){
        fail();
    }
    // Setup memory
    memory[MINIMAL_MEMORY_SIZE+1] = PRIMITIVE_FILE_MODE_READ;
    for(int i = 0; i<file_path_length; i++){
        memory[MINIMAL_MEMORY_SIZE+1+i] = file_path[i];
    }
    memory[PRIMITIVE_RESULT_POINTER_HIGH_ADDRESS] = 0x00;
    memory[PRIMITIVE_RESULT_POINTER_MIDDLE_ADDRESS] = 0x00;
    memory[PRIMITIVE_RESULT_POINTER_LOW_ADDRESS] = MINIMAL_MEMORY_SIZE;
    memory[MINIMAL_MEMORY_SIZE] = PRIMITIVE_FILE_MODE_WRITE;
    set_memory(vm, memory);

    // Make sure file_streams[3] was not used before primitive call.
    fail_unless(vm->file_streams[3] == NULL);

    primitive_open_file(vm);

    // Make sure primitive succeed
    fail_unless(memory[PRIMITIVE_RESULT_CODE_ADDRESS] == PRIMITIVE_OK_RESULT_CODE);

    // Make sure file stream is allocated.
    fail_unless(vm->file_streams[3] != NULL);
    fail_unless(memory[MINIMAL_MEMORY_SIZE] == 3);
    
    // Make sure file is open in write mode.
    fail_unless(fputc('a', vm->file_streams[3]) != EOF);
    // Flush buffer to be able to read file.
    fail_unless(fflush(vm->file_streams[3]) == 0);

    // Create file to read from.
    fp = fopen(file_path, "r");
    fail_unless((char)fgetc(fp) == 'a'); 
    fclose(fp);

    remove(file_path);
    finalize_primitives_data(vm);
    free(vm);

#test test_primitive_open_file_append_no_file
    struct virtual_machine *vm;
    char *file_path = "test_append_no_file.txt";
    int file_path_length = strlen(file_path) + 1;
    FILE * fp;
    
    // Need a memory that can store open mode (1 byte) for the file and the
    // null-terminated string for the file path.
    WORD memory[MINIMAL_MEMORY_SIZE+1+file_path_length];
    if(new_vm(&vm) != VM_OK){
        fail();
    }
    // Setup memory
    memory[MINIMAL_MEMORY_SIZE+1] = PRIMITIVE_FILE_MODE_READ;
    for(int i = 0; i<file_path_length; i++){
        memory[MINIMAL_MEMORY_SIZE+1+i] = file_path[i];
    }
    memory[PRIMITIVE_RESULT_POINTER_HIGH_ADDRESS] = 0x00;
    memory[PRIMITIVE_RESULT_POINTER_MIDDLE_ADDRESS] = 0x00;
    memory[PRIMITIVE_RESULT_POINTER_LOW_ADDRESS] = MINIMAL_MEMORY_SIZE;
    memory[MINIMAL_MEMORY_SIZE] = PRIMITIVE_FILE_MODE_APPEND;
    set_memory(vm, memory);

    // Make sure file_streams[3] was not used before primitive call.
    fail_unless(vm->file_streams[3] == NULL);

    primitive_open_file(vm);

    // Make sure primitive succeed
    fail_unless(memory[PRIMITIVE_RESULT_CODE_ADDRESS] == PRIMITIVE_OK_RESULT_CODE);

    // Make sure file stream is allocated.
    fail_unless(vm->file_streams[3] != NULL);
    fail_unless(memory[MINIMAL_MEMORY_SIZE] == 3);
    
    // Make sure file is open in append mode.
    fail_unless(fputc('a', vm->file_streams[3]) != EOF);
    // Flush buffer to be able to read file.
    fail_unless(fflush(vm->file_streams[3]) == 0);

    // Create file to read from.
    fp = fopen(file_path, "r");
    fail_unless((char)fgetc(fp) == 'a'); 
    fclose(fp);

    remove(file_path);
    finalize_primitives_data(vm);
    free(vm);

#test test_primitive_open_file_append_existing_file
    struct virtual_machine *vm;
    char *file_path = "test_append_existing_file.txt";
    int file_path_length = strlen(file_path) + 1;

    // Create pre-existing file to write on.
    FILE * fp;
    fp = fopen(file_path, "w");
    fail_unless(fputc('b', fp) != EOF); 
    fclose(fp);
    
    // Need a memory that can store open mode (1 byte) for the file and the
    // null-terminated string for the file path.
    WORD memory[MINIMAL_MEMORY_SIZE+1+file_path_length];
    if(new_vm(&vm) != VM_OK){
        fail();
    }
    // Setup memory
    memory[MINIMAL_MEMORY_SIZE+1] = PRIMITIVE_FILE_MODE_READ;
    for(int i = 0; i<file_path_length; i++){
        memory[MINIMAL_MEMORY_SIZE+1+i] = file_path[i];
    }
    memory[PRIMITIVE_RESULT_POINTER_HIGH_ADDRESS] = 0x00;
    memory[PRIMITIVE_RESULT_POINTER_MIDDLE_ADDRESS] = 0x00;
    memory[PRIMITIVE_RESULT_POINTER_LOW_ADDRESS] = MINIMAL_MEMORY_SIZE;
    memory[MINIMAL_MEMORY_SIZE] = PRIMITIVE_FILE_MODE_APPEND;
    set_memory(vm, memory);

    // Make sure file_streams[3] was not used before primitive call.
    fail_unless(vm->file_streams[3] == NULL);

    primitive_open_file(vm);

    // Make sure primitive succeed
    fail_unless(memory[PRIMITIVE_RESULT_CODE_ADDRESS] == PRIMITIVE_OK_RESULT_CODE);

    // Make sure file stream is allocated.
    fail_unless(vm->file_streams[3] != NULL);
    fail_unless(memory[MINIMAL_MEMORY_SIZE] == 3);
    
    // Make sure file is open in append mode.
    fail_unless(fputc('a', vm->file_streams[3]) != EOF);
    // Flush buffer to be able to read file.
    fail_unless(fflush(vm->file_streams[3]) == 0);

    // Create file to read from.
    fp = fopen(file_path, "r");
    fail_unless((char)fgetc(fp) == 'b');
    fail_unless((char)fgetc(fp) == 'a'); 
    fclose(fp);

    remove(file_path);
    finalize_primitives_data(vm);
    free(vm);

#test test_primitive_open_file_no_stream_available
    struct virtual_machine *vm;
    char *file_path = "test_open_file_no_stream_available.txt";
    int file_path_length = strlen(file_path) + 1;
    
    // Need a memory that can store open mode (1 byte) for the file and the
    // null-terminated string for the file path.
    WORD memory[MINIMAL_MEMORY_SIZE+1+file_path_length];
    if(new_vm(&vm) != VM_OK){
        fail();
    }
    // Setup memory
    memory[MINIMAL_MEMORY_SIZE+1] = PRIMITIVE_FILE_MODE_READ;
    for(int i = 0; i<file_path_length; i++){
        memory[MINIMAL_MEMORY_SIZE+1+i] = file_path[i];
    }
    memory[PRIMITIVE_RESULT_POINTER_HIGH_ADDRESS] = 0x00;
    memory[PRIMITIVE_RESULT_POINTER_MIDDLE_ADDRESS] = 0x00;
    memory[PRIMITIVE_RESULT_POINTER_LOW_ADDRESS] = MINIMAL_MEMORY_SIZE;
    memory[MINIMAL_MEMORY_SIZE] = PRIMITIVE_FILE_MODE_WRITE;
    set_memory(vm, memory);

    // Fill all stream slots with stdout
    for(int i=PRIMITIVE_FILE_STREAM_STDERR+1;
        i<FILE_STREAMS_SIZE;
        i++){
        vm->file_streams[i] = stdout;
    }

    // Make sure not slot is available.
    for(int i=0;
        i<FILE_STREAMS_SIZE;
        i++){
        fail_unless(vm->file_streams[i] != NULL);
    }

    primitive_open_file(vm);

    // Make sure primitive failed
    fail_unless(memory[PRIMITIVE_RESULT_CODE_ADDRESS] == PRIMITIVE_FAILED_RESULT_CODE);

    // Undo mess with stream slots
    for(int i=PRIMITIVE_FILE_STREAM_STDERR+1;
        i<FILE_STREAMS_SIZE;
        i++){
        vm->file_streams[i] = NULL;
    }

    remove(file_path);
    finalize_primitives_data(vm);
    free(vm);

#test test_primitive_open_file_wrong_open_mode
    struct virtual_machine *vm;
    char *file_path = "test_open_file_wrong_open_mode.txt";
    int file_path_length = strlen(file_path) + 1;
    
    // Need a memory that can store open mode (1 byte) for the file and the
    // null-terminated string for the file path.
    WORD memory[MINIMAL_MEMORY_SIZE+1+file_path_length];
    if(new_vm(&vm) != VM_OK){
        fail();
    }
    // Setup memory
    memory[MINIMAL_MEMORY_SIZE+1] = PRIMITIVE_FILE_MODE_READ;
    for(int i = 0; i<file_path_length; i++){
        memory[MINIMAL_MEMORY_SIZE+1+i] = file_path[i];
    }
    memory[PRIMITIVE_RESULT_POINTER_HIGH_ADDRESS] = 0x00;
    memory[PRIMITIVE_RESULT_POINTER_MIDDLE_ADDRESS] = 0x00;
    memory[PRIMITIVE_RESULT_POINTER_LOW_ADDRESS] = MINIMAL_MEMORY_SIZE;
    memory[MINIMAL_MEMORY_SIZE] = 255;
    set_memory(vm, memory);

    primitive_open_file(vm);

    // Make sure primitive failed
    fail_unless(memory[PRIMITIVE_RESULT_CODE_ADDRESS] == PRIMITIVE_FAILED_RESULT_CODE);

    remove(file_path);
    finalize_primitives_data(vm);
    free(vm);

#test test_primitive_close_file
    struct virtual_machine *vm;
    char *file_path = "test_close_file.txt";
    int file_path_length = strlen(file_path) + 1;

    // Need a memory that can store open mode (1 byte) for the file and
    // 1 byte for the stream id.
    WORD memory[MINIMAL_MEMORY_SIZE+1+file_path_length];
    if(new_vm(&vm) != VM_OK){
        fail();
    }
    // Setup memory
    memory[MINIMAL_MEMORY_SIZE+1] = PRIMITIVE_FILE_MODE_READ;
    for(int i = 0; i<file_path_length; i++){
        memory[MINIMAL_MEMORY_SIZE+1+i] = file_path[i];
    }
    memory[PRIMITIVE_RESULT_POINTER_HIGH_ADDRESS] = 0x00;
    memory[PRIMITIVE_RESULT_POINTER_MIDDLE_ADDRESS] = 0x00;
    memory[PRIMITIVE_RESULT_POINTER_LOW_ADDRESS] = MINIMAL_MEMORY_SIZE;
    memory[MINIMAL_MEMORY_SIZE] = PRIMITIVE_FILE_MODE_WRITE;
    set_memory(vm, memory);

    // First open a file.
    primitive_open_file(vm);

    // Make sure primitive succeed
    fail_unless(memory[PRIMITIVE_RESULT_CODE_ADDRESS] == PRIMITIVE_OK_RESULT_CODE);

    memory[PRIMITIVE_RESULT_POINTER_HIGH_ADDRESS] = 0x00;
    memory[PRIMITIVE_RESULT_POINTER_MIDDLE_ADDRESS] = 0x00;
    memory[PRIMITIVE_RESULT_POINTER_LOW_ADDRESS] = MINIMAL_MEMORY_SIZE;

    // Then test the file is correctly open.
    primitive_is_file_open(vm);

    // Make sure primitive succeed
    fail_unless(memory[PRIMITIVE_RESULT_CODE_ADDRESS] == PRIMITIVE_OK_RESULT_CODE);

    // Make sure file stream is open.
    fail_unless(memory[MINIMAL_MEMORY_SIZE] == PRIMITIVE_FILE_IS_OPEN);

    // From here id of the stream is at memory[MINIMAL_MEMORY_SIZE]
    memory[PRIMITIVE_RESULT_POINTER_HIGH_ADDRESS] = 0x00;
    memory[PRIMITIVE_RESULT_POINTER_MIDDLE_ADDRESS] = 0x00;
    memory[PRIMITIVE_RESULT_POINTER_LOW_ADDRESS] = MINIMAL_MEMORY_SIZE;

    // Then close the file.
    primitive_close_file(vm);

    memory[PRIMITIVE_RESULT_POINTER_HIGH_ADDRESS] = 0x00;
    memory[PRIMITIVE_RESULT_POINTER_MIDDLE_ADDRESS] = 0x00;
    memory[PRIMITIVE_RESULT_POINTER_LOW_ADDRESS] = MINIMAL_MEMORY_SIZE;

    // Then test the file is correctly closed.
    primitive_is_file_open(vm);

    // Make sure primitive succeed
    fail_unless(memory[PRIMITIVE_RESULT_CODE_ADDRESS] == PRIMITIVE_OK_RESULT_CODE);

    // Make sure file stream is closed.
    fail_unless(memory[MINIMAL_MEMORY_SIZE] == PRIMITIVE_FILE_IS_CLOSED);

    finalize_primitives_data(vm);
    free(vm);

#test test_primitive_is_file_open
    struct virtual_machine *vm;
    char *file_path = "test_is_file_open.txt";
    int file_path_length = strlen(file_path) + 1;

    // Need a memory that can store open mode (1 byte) for the file and the
    // null-terminated string for the file path.
    WORD memory[MINIMAL_MEMORY_SIZE+1+file_path_length];
    if(new_vm(&vm) != VM_OK){
        fail();
    }
    // Setup memory
    memory[MINIMAL_MEMORY_SIZE+1] = PRIMITIVE_FILE_MODE_READ;
    for(int i = 0; i<file_path_length; i++){
        memory[MINIMAL_MEMORY_SIZE+1+i] = file_path[i];
    }
    memory[PRIMITIVE_RESULT_POINTER_HIGH_ADDRESS] = 0x00;
    memory[PRIMITIVE_RESULT_POINTER_MIDDLE_ADDRESS] = 0x00;
    memory[PRIMITIVE_RESULT_POINTER_LOW_ADDRESS] = MINIMAL_MEMORY_SIZE;
    memory[MINIMAL_MEMORY_SIZE] = PRIMITIVE_FILE_MODE_WRITE;
    set_memory(vm, memory);

    primitive_open_file(vm);

    // Make sure primitive succeed
    fail_unless(memory[PRIMITIVE_RESULT_CODE_ADDRESS] == PRIMITIVE_OK_RESULT_CODE);

    // memory[MINIMAL_MEMORY_SIZE] contains stream id because of previous
    // primitive call
    memory[PRIMITIVE_RESULT_POINTER_HIGH_ADDRESS] = 0x00;
    memory[PRIMITIVE_RESULT_POINTER_MIDDLE_ADDRESS] = 0x00;
    memory[PRIMITIVE_RESULT_POINTER_LOW_ADDRESS] = MINIMAL_MEMORY_SIZE;

    primitive_is_file_open(vm);

    // Make sure primitive succeed
    fail_unless(memory[PRIMITIVE_RESULT_CODE_ADDRESS] == PRIMITIVE_OK_RESULT_CODE);

    // Make sure file stream is open.
    fail_unless(memory[MINIMAL_MEMORY_SIZE] == PRIMITIVE_FILE_IS_OPEN);

    finalize_primitives_data(vm);
    free(vm);

#test test_primitive_is_file_open_stdin
    struct virtual_machine *vm;

    // Need a memory that can store file stream id.
    WORD memory[MINIMAL_MEMORY_SIZE+1];
    if(new_vm(&vm) != VM_OK){
        fail();
    }
    // Setup memory
    memory[PRIMITIVE_RESULT_POINTER_HIGH_ADDRESS] = 0x00;
    memory[PRIMITIVE_RESULT_POINTER_MIDDLE_ADDRESS] = 0x00;
    memory[PRIMITIVE_RESULT_POINTER_LOW_ADDRESS] = MINIMAL_MEMORY_SIZE;
    memory[MINIMAL_MEMORY_SIZE] = PRIMITIVE_FILE_STREAM_STDIN;
    set_memory(vm, memory);

    primitive_is_file_open(vm);

    // Make sure primitive succeed
    fail_unless(memory[PRIMITIVE_RESULT_CODE_ADDRESS] == PRIMITIVE_OK_RESULT_CODE);

    // Make sure file stream is open.
    fail_unless(memory[MINIMAL_MEMORY_SIZE] == PRIMITIVE_FILE_IS_OPEN);
    
    finalize_primitives_data(vm);
    free(vm);

#test test_primitive_is_file_open_stdout
    struct virtual_machine *vm;

    // Need a memory that can store file stream id.
    WORD memory[MINIMAL_MEMORY_SIZE+1];
    if(new_vm(&vm) != VM_OK){
        fail();
    }
    // Setup memory
    memory[PRIMITIVE_RESULT_POINTER_HIGH_ADDRESS] = 0x00;
    memory[PRIMITIVE_RESULT_POINTER_MIDDLE_ADDRESS] = 0x00;
    memory[PRIMITIVE_RESULT_POINTER_LOW_ADDRESS] = MINIMAL_MEMORY_SIZE;
    memory[MINIMAL_MEMORY_SIZE] = PRIMITIVE_FILE_STREAM_STDOUT;
    set_memory(vm, memory);

    primitive_is_file_open(vm);

    // Make sure primitive succeed
    fail_unless(memory[PRIMITIVE_RESULT_CODE_ADDRESS] == PRIMITIVE_OK_RESULT_CODE);

    // Make sure file stream is open.
    fail_unless(memory[MINIMAL_MEMORY_SIZE] == PRIMITIVE_FILE_IS_OPEN);
    
    finalize_primitives_data(vm);
    free(vm);

#test test_primitive_is_file_open_stderr
    struct virtual_machine *vm;

    // Need a memory that can store file stream id.
    WORD memory[MINIMAL_MEMORY_SIZE+1];
    if(new_vm(&vm) != VM_OK){
        fail();
    }
    // Setup memory
    memory[PRIMITIVE_RESULT_POINTER_HIGH_ADDRESS] = 0x00;
    memory[PRIMITIVE_RESULT_POINTER_MIDDLE_ADDRESS] = 0x00;
    memory[PRIMITIVE_RESULT_POINTER_LOW_ADDRESS] = MINIMAL_MEMORY_SIZE;
    memory[MINIMAL_MEMORY_SIZE] = PRIMITIVE_FILE_STREAM_STDERR;
    set_memory(vm, memory);

    primitive_is_file_open(vm);

    // Make sure primitive succeed
    fail_unless(memory[PRIMITIVE_RESULT_CODE_ADDRESS] == PRIMITIVE_OK_RESULT_CODE);

    // Make sure file stream is open.
    fail_unless(memory[MINIMAL_MEMORY_SIZE] == PRIMITIVE_FILE_IS_OPEN);
    
    finalize_primitives_data(vm);
    free(vm);

/*
 * Extended primitive is not supported yet. So this primitive should always fail.
 */
#test test_primitive_extended
    struct virtual_machine *vm;

    // Need a memory for the VM.
    WORD memory[MINIMAL_MEMORY_SIZE];
    if(new_vm(&vm) != VM_OK){
        fail();
    }
    set_memory(vm, memory);

    primitive_extended(vm);

    // Make sure primitive failed
    fail_unless(memory[PRIMITIVE_RESULT_CODE_ADDRESS] == PRIMITIVE_FAILED_RESULT_CODE);
    
    finalize_primitives_data(vm);
    free(vm);